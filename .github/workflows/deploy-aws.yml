name: Deploy StoryMine to AWS

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [closed]

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
  ECS_CLUSTER: storymine-production

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd src/frontend && npm ci
          cd ../backend && npm ci

      - name: Run tests
        run: |
          npm run test:backend
          npm run test:frontend

      - name: Lint code
        run: |
          cd src/backend && npm run lint
          cd ../frontend && npm run lint

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push backend image
        env:
          ECR_REPOSITORY: storymine/backend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./src/backend
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Build, tag, and push frontend image
        env:
          ECR_REPOSITORY: storymine/frontend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./src/frontend
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Build, tag, and push import task image
        env:
          ECR_REPOSITORY: storymine/intelligence-import
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -f ./src/backend/Dockerfile.import -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./src/backend
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Update ECS task definitions
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Update backend task definition
          aws ecs describe-task-definition --task-definition storymine-backend --query taskDefinition > backend-task-def.json
          jq '.containerDefinitions[0].image = "'$ECR_REGISTRY'/storymine/backend:'$IMAGE_TAG'"' backend-task-def.json > backend-task-def-updated.json
          jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .placementConstraints, .compatibilities, .registeredAt, .registeredBy)' backend-task-def-updated.json > backend-task-def-final.json
          aws ecs register-task-definition --cli-input-json file://backend-task-def-final.json

          # Update frontend task definition
          aws ecs describe-task-definition --task-definition storymine-frontend --query taskDefinition > frontend-task-def.json
          jq '.containerDefinitions[0].image = "'$ECR_REGISTRY'/storymine/frontend:'$IMAGE_TAG'"' frontend-task-def.json > frontend-task-def-updated.json
          jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .placementConstraints, .compatibilities, .registeredAt, .registeredBy)' frontend-task-def-updated.json > frontend-task-def-final.json
          aws ecs register-task-definition --cli-input-json file://frontend-task-def-final.json

          # Update import task definition
          aws ecs describe-task-definition --task-definition storymine-intelligence-import --query taskDefinition > import-task-def.json
          jq '.containerDefinitions[0].image = "'$ECR_REGISTRY'/storymine/intelligence-import:'$IMAGE_TAG'"' import-task-def.json > import-task-def-updated.json
          jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .placementConstraints, .compatibilities, .registeredAt, .registeredBy)' import-task-def-updated.json > import-task-def-final.json
          aws ecs register-task-definition --cli-input-json file://import-task-def-final.json

      - name: Deploy to ECS
        run: |
          # Update backend service
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service storymine-backend \
            --force-new-deployment

          # Update frontend service
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service storymine-frontend \
            --force-new-deployment

      - name: Wait for deployment to complete
        run: |
          echo "Waiting for backend service to stabilize..."
          aws ecs wait services-stable \
            --cluster $ECS_CLUSTER \
            --services storymine-backend

          echo "Waiting for frontend service to stabilize..."
          aws ecs wait services-stable \
            --cluster $ECS_CLUSTER \
            --services storymine-frontend

      - name: Verify deployment
        run: |
          # Get load balancer URL
          ALB_ARN=$(aws elbv2 describe-load-balancers --names storymine-alb --query 'LoadBalancers[0].LoadBalancerArn' --output text)
          ALB_DNS=$(aws elbv2 describe-load-balancers --load-balancer-arns $ALB_ARN --query 'LoadBalancers[0].DNSName' --output text)
          
          echo "Application deployed successfully!"
          echo "Load Balancer URL: https://$ALB_DNS"
          
          # Basic health check
          echo "Performing health check..."
          curl -f "https://$ALB_DNS/health" || exit 1
          echo "Health check passed!"

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ StoryMine deployment succeeded!"
          else
            echo "❌ StoryMine deployment failed!"
            exit 1
          fi

  deploy-staging:
    needs: test
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials (Staging)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_STAGING }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_STAGING }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to staging environment
        run: |
          echo "Deploying to staging environment..."
          # Similar deployment steps but to staging cluster
          # This allows testing before production deployment 